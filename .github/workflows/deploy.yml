name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때만 트리거

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 빌드
      - name: Build project
        run: |
          ./gradlew clean build -x test

      # 4. PEM 파일 생성
      - name: Create PEM file
        run: echo "${{ secrets.EC2_PEM }}" > ec2-key.pem

      # 5. PEM 파일 권한 설정
      - name: Set permissions for PEM file
        run: chmod 600 ec2-key.pem

      # 6. SSH 디렉토리 생성
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      # 7. Host key 등록
      - name: Add host to known_hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 8. application.yml과 application-local.yml 복사
      - name: Copy application configuration files to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          PEM_FILE: ec2-key.pem
        run: |
          scp -i $PEM_FILE src/main/resources/application.yml $USER@$HOST:~/application.yml
          scp -i $PEM_FILE src/main/resources/application-local.yml $USER@$HOST:~/application-local.yml
      

      # 9. JAR 파일 배포 및 실행
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          PEM_FILE: ec2-key.pem
        run: |
          scp -i $PEM_FILE build/libs/app.jar $USER@$HOST:~/app.jar
          ssh -i $PEM_FILE $USER@$HOST "bash ~/deploy.sh"
